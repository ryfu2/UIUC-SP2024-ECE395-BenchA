
helloworld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002490  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080025d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080025d8  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000772d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013a2  00000000  00000000  000277a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  00028b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b9  00000000  00000000  00029170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000100d8  00000000  00000000  00029629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000086ba  00000000  00000000  00039701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000627df  00000000  00000000  00041dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001510  00000000  00000000  000a459c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000a5aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002538 	.word	0x08002538

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002538 	.word	0x08002538

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f996 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f812 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8aa 	bl	800060c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004b8:	f000 f87a 	bl	80005b0 <MX_LPUART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */
//	  uint8_t Test[] = "LED toggles!!!\r\n"; //Data to send
//	  HAL_UART_Transmit(&hlpuart1,Test,sizeof(Test),10);// Sending in normal mode
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <main+0x2c>)
 80004be:	2101      	movs	r1, #1
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fc5e 	bl	8000d82 <HAL_GPIO_TogglePin>
	  HAL_Delay (500);   /* Insert delay 100 ms */
 80004c6:	23fa      	movs	r3, #250	; 0xfa
 80004c8:	005b      	lsls	r3, r3, #1
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 f9f6 	bl	80008bc <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 80004d0:	e7f4      	b.n	80004bc <main+0x14>
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	50000400 	.word	0x50000400

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b099      	sub	sp, #100	; 0x64
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	242c      	movs	r4, #44	; 0x2c
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	2334      	movs	r3, #52	; 0x34
 80004e6:	001a      	movs	r2, r3
 80004e8:	2100      	movs	r1, #0
 80004ea:	f001 fff9 	bl	80024e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ee:	2318      	movs	r3, #24
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	0018      	movs	r0, r3
 80004f4:	2314      	movs	r3, #20
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f001 fff1 	bl	80024e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	2318      	movs	r3, #24
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f001 ffea 	bl	80024e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <SystemClock_Config+0xd0>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <SystemClock_Config+0xd4>)
 8000512:	401a      	ands	r2, r3
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <SystemClock_Config+0xd0>)
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0109      	lsls	r1, r1, #4
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2210      	movs	r2, #16
 8000524:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	22a0      	movs	r2, #160	; 0xa0
 8000536:	0212      	lsls	r2, r2, #8
 8000538:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	187b      	adds	r3, r7, r1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fc38 	bl	8000db8 <HAL_RCC_OscConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800054c:	f000 f8a2 	bl	8000694 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	2118      	movs	r1, #24
 8000552:	187b      	adds	r3, r7, r1
 8000554:	220f      	movs	r2, #15
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f000 ff9b 	bl	80014b0 <HAL_RCC_ClockConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057e:	f000 f889 	bl	8000694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000582:	003b      	movs	r3, r7
 8000584:	2204      	movs	r2, #4
 8000586:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	f001 f9b1 	bl	80018f8 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800059a:	f000 f87b 	bl	8000694 <Error_Handler>
  }
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b019      	add	sp, #100	; 0x64
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40007000 	.word	0x40007000
 80005ac:	ffffe7ff 	.word	0xffffe7ff

080005b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005b6:	4a14      	ldr	r2, [pc, #80]	; (8000608 <MX_LPUART1_UART_Init+0x58>)
 80005b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 19200;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005bc:	2296      	movs	r2, #150	; 0x96
 80005be:	01d2      	lsls	r2, r2, #7
 80005c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_LPUART1_UART_Init+0x54>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 faae 	bl	8001b50 <HAL_UART_Init>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80005f8:	f000 f84c 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	20000028 	.word	0x20000028
 8000608:	40004800 	.word	0x40004800

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	240c      	movs	r4, #12
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2314      	movs	r3, #20
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f001 ff5f 	bl	80024e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_GPIO_Init+0x80>)
 8000624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_GPIO_Init+0x80>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_GPIO_Init+0x80>)
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_GPIO_Init+0x80>)
 800063c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800063e:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_GPIO_Init+0x80>)
 8000640:	2102      	movs	r1, #2
 8000642:	430a      	orrs	r2, r1
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_GPIO_Init+0x80>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	2202      	movs	r2, #2
 800064c:	4013      	ands	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0x84>)
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fb75 	bl	8000d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800065e:	0021      	movs	r1, r4
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	187b      	adds	r3, r7, r1
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <MX_GPIO_Init+0x84>)
 800067c:	0019      	movs	r1, r3
 800067e:	0010      	movs	r0, r2
 8000680:	f000 f9f4 	bl	8000a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b009      	add	sp, #36	; 0x24
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	50000400 	.word	0x50000400

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <HAL_MspInit+0x24>)
 80006a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x24>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_MspInit+0x24>)
 80006b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_MspInit+0x24>)
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	0549      	lsls	r1, r1, #21
 80006ba:	430a      	orrs	r2, r1
 80006bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	240c      	movs	r4, #12
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f001 ff00 	bl	80024e0 <memset>
  if(huart->Instance==LPUART1)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a18      	ldr	r2, [pc, #96]	; (8000748 <HAL_UART_MspInit+0x80>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d129      	bne.n	800073e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_UART_MspInit+0x84>)
 80006ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_UART_MspInit+0x84>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	02c9      	lsls	r1, r1, #11
 80006f4:	430a      	orrs	r2, r1
 80006f6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_UART_MspInit+0x84>)
 80006fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <HAL_UART_MspInit+0x84>)
 80006fe:	2101      	movs	r1, #1
 8000700:	430a      	orrs	r2, r1
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_UART_MspInit+0x84>)
 8000706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000708:	2201      	movs	r2, #1
 800070a:	4013      	ands	r3, r2
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	220c      	movs	r2, #12
 8000716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2202      	movs	r2, #2
 800071c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2203      	movs	r2, #3
 8000728:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2206      	movs	r2, #6
 800072e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	187a      	adds	r2, r7, r1
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 f997 	bl	8000a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b009      	add	sp, #36	; 0x24
 8000744:	bd90      	pop	{r4, r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40004800 	.word	0x40004800
 800074c:	40021000 	.word	0x40021000

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 f886 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800078a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800078c:	f7ff fff7 	bl	800077e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f001 fe9b 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007ba:	f7ff fe75 	bl	80004a8 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
   ldr   r0, =_estack
 80007c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007cc:	080025cc 	.word	0x080025cc
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d4:	200000b4 	.word	0x200000b4

080007d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_COMP_IRQHandler>
	...

080007dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_Init+0x3c>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_Init+0x3c>)
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	430a      	orrs	r2, r1
 80007f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f811 	bl	800081c <HAL_InitTick>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d003      	beq.n	8000806 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e001      	b.n	800080a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000806:	f7ff ff4b 	bl	80006a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <HAL_InitTick+0x5c>)
 8000826:	681c      	ldr	r4, [r3, #0]
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	0019      	movs	r1, r3
 800082e:	23fa      	movs	r3, #250	; 0xfa
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	f7ff fc69 	bl	8000108 <__udivsi3>
 8000836:	0003      	movs	r3, r0
 8000838:	0019      	movs	r1, r3
 800083a:	0020      	movs	r0, r4
 800083c:	f7ff fc64 	bl	8000108 <__udivsi3>
 8000840:	0003      	movs	r3, r0
 8000842:	0018      	movs	r0, r3
 8000844:	f000 f905 	bl	8000a52 <HAL_SYSTICK_Config>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	e00f      	b.n	8000870 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b03      	cmp	r3, #3
 8000854:	d80b      	bhi.n	800086e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	2301      	movs	r3, #1
 800085a:	425b      	negs	r3, r3
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f8e2 	bl	8000a28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_InitTick+0x64>)
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	001a      	movs	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	18d2      	adds	r2, r2, r3
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000008 	.word	0x20000008
 80008a4:	200000b0 	.word	0x200000b0

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	200000b0 	.word	0x200000b0

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff fff0 	bl	80008a8 <HAL_GetTick>
 80008c8:	0003      	movs	r3, r0
 80008ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_Delay+0x44>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	001a      	movs	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	189b      	adds	r3, r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	f7ff ffe0 	bl	80008a8 <HAL_GetTick>
 80008e8:	0002      	movs	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b004      	add	sp, #16
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	0002      	movs	r2, r0
 800090c:	6039      	str	r1, [r7, #0]
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b7f      	cmp	r3, #127	; 0x7f
 8000918:	d828      	bhi.n	800096c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091a:	4a2f      	ldr	r2, [pc, #188]	; (80009d8 <__NVIC_SetPriority+0xd4>)
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b25b      	sxtb	r3, r3
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	33c0      	adds	r3, #192	; 0xc0
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	589b      	ldr	r3, [r3, r2]
 800092a:	1dfa      	adds	r2, r7, #7
 800092c:	7812      	ldrb	r2, [r2, #0]
 800092e:	0011      	movs	r1, r2
 8000930:	2203      	movs	r2, #3
 8000932:	400a      	ands	r2, r1
 8000934:	00d2      	lsls	r2, r2, #3
 8000936:	21ff      	movs	r1, #255	; 0xff
 8000938:	4091      	lsls	r1, r2
 800093a:	000a      	movs	r2, r1
 800093c:	43d2      	mvns	r2, r2
 800093e:	401a      	ands	r2, r3
 8000940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	019b      	lsls	r3, r3, #6
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	401a      	ands	r2, r3
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	0018      	movs	r0, r3
 8000950:	2303      	movs	r3, #3
 8000952:	4003      	ands	r3, r0
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	481f      	ldr	r0, [pc, #124]	; (80009d8 <__NVIC_SetPriority+0xd4>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b25b      	sxtb	r3, r3
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	430a      	orrs	r2, r1
 8000964:	33c0      	adds	r3, #192	; 0xc0
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800096a:	e031      	b.n	80009d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <__NVIC_SetPriority+0xd8>)
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0019      	movs	r1, r3
 8000974:	230f      	movs	r3, #15
 8000976:	400b      	ands	r3, r1
 8000978:	3b08      	subs	r3, #8
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	3306      	adds	r3, #6
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	3304      	adds	r3, #4
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1dfa      	adds	r2, r7, #7
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	0011      	movs	r1, r2
 800098c:	2203      	movs	r2, #3
 800098e:	400a      	ands	r2, r1
 8000990:	00d2      	lsls	r2, r2, #3
 8000992:	21ff      	movs	r1, #255	; 0xff
 8000994:	4091      	lsls	r1, r2
 8000996:	000a      	movs	r2, r1
 8000998:	43d2      	mvns	r2, r2
 800099a:	401a      	ands	r2, r3
 800099c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	019b      	lsls	r3, r3, #6
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	401a      	ands	r2, r3
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0018      	movs	r0, r3
 80009ac:	2303      	movs	r3, #3
 80009ae:	4003      	ands	r3, r0
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <__NVIC_SetPriority+0xd8>)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	001c      	movs	r4, r3
 80009bc:	230f      	movs	r3, #15
 80009be:	4023      	ands	r3, r4
 80009c0:	3b08      	subs	r3, #8
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	430a      	orrs	r2, r1
 80009c6:	3306      	adds	r3, #6
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	18c3      	adds	r3, r0, r3
 80009cc:	3304      	adds	r3, #4
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b003      	add	sp, #12
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	1e5a      	subs	r2, r3, #1
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	045b      	lsls	r3, r3, #17
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d301      	bcc.n	80009f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f4:	2301      	movs	r3, #1
 80009f6:	e010      	b.n	8000a1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <SysTick_Config+0x44>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	3a01      	subs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a00:	2301      	movs	r3, #1
 8000a02:	425b      	negs	r3, r3
 8000a04:	2103      	movs	r1, #3
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff ff7c 	bl	8000904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <SysTick_Config+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <SysTick_Config+0x44>)
 8000a14:	2207      	movs	r2, #7
 8000a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	e000e010 	.word	0xe000e010

08000a28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	210f      	movs	r1, #15
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	1c02      	adds	r2, r0, #0
 8000a38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff ff5d 	bl	8000904 <__NVIC_SetPriority>
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b004      	add	sp, #16
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ffbf 	bl	80009e0 <SysTick_Config>
 8000a62:	0003      	movs	r3, r0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a82:	e149      	b.n	8000d18 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d100      	bne.n	8000a9c <HAL_GPIO_Init+0x30>
 8000a9a:	e13a      	b.n	8000d12 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	409a      	lsls	r2, r3
 8000ac2:	0013      	movs	r3, r2
 8000ac4:	43da      	mvns	r2, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	43da      	mvns	r2, r3
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	2201      	movs	r2, #1
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	0013      	movs	r3, r2
 8000b32:	43da      	mvns	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	409a      	lsls	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2203      	movs	r2, #3
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	58d3      	ldr	r3, [r2, r3]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2207      	movs	r2, #7
 8000b70:	4013      	ands	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	2107      	movs	r1, #7
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	0092      	lsls	r2, r2, #2
 8000ba2:	6939      	ldr	r1, [r7, #16]
 8000ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	409a      	lsls	r2, r3
 8000bcc:	0013      	movs	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	23c0      	movs	r3, #192	; 0xc0
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	4013      	ands	r3, r2
 8000be4:	d100      	bne.n	8000be8 <HAL_GPIO_Init+0x17c>
 8000be6:	e094      	b.n	8000d12 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b51      	ldr	r3, [pc, #324]	; (8000d30 <HAL_GPIO_Init+0x2c4>)
 8000bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <HAL_GPIO_Init+0x2c4>)
 8000bee:	2101      	movs	r1, #1
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bf4:	4a4f      	ldr	r2, [pc, #316]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	589b      	ldr	r3, [r3, r2]
 8000c00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2203      	movs	r2, #3
 8000c06:	4013      	ands	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	0013      	movs	r3, r2
 8000c10:	43da      	mvns	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	23a0      	movs	r3, #160	; 0xa0
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0x1de>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a44      	ldr	r2, [pc, #272]	; (8000d38 <HAL_GPIO_Init+0x2cc>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d00d      	beq.n	8000c46 <HAL_GPIO_Init+0x1da>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a43      	ldr	r2, [pc, #268]	; (8000d3c <HAL_GPIO_Init+0x2d0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d007      	beq.n	8000c42 <HAL_GPIO_Init+0x1d6>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a42      	ldr	r2, [pc, #264]	; (8000d40 <HAL_GPIO_Init+0x2d4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d101      	bne.n	8000c3e <HAL_GPIO_Init+0x1d2>
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x1e0>
 8000c3e:	2306      	movs	r3, #6
 8000c40:	e004      	b.n	8000c4c <HAL_GPIO_Init+0x1e0>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x1e0>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x1e0>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	2103      	movs	r1, #3
 8000c50:	400a      	ands	r2, r1
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	4093      	lsls	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5c:	4935      	ldr	r1, [pc, #212]	; (8000d34 <HAL_GPIO_Init+0x2c8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	035b      	lsls	r3, r3, #13
 8000c82:	4013      	ands	r3, r2
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	039b      	lsls	r3, r3, #14
 8000cac:	4013      	ands	r3, r2
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43da      	mvns	r2, r3
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	025b      	lsls	r3, r3, #9
 8000d00:	4013      	ands	r3, r2
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_GPIO_Init+0x2d8>)
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	40da      	lsrs	r2, r3
 8000d20:	1e13      	subs	r3, r2, #0
 8000d22:	d000      	beq.n	8000d26 <HAL_GPIO_Init+0x2ba>
 8000d24:	e6ae      	b.n	8000a84 <HAL_GPIO_Init+0x18>
  }
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b006      	add	sp, #24
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	50000400 	.word	0x50000400
 8000d3c:	50000800 	.word	0x50000800
 8000d40:	50001c00 	.word	0x50001c00
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	0008      	movs	r0, r1
 8000d52:	0011      	movs	r1, r2
 8000d54:	1cbb      	adds	r3, r7, #2
 8000d56:	1c02      	adds	r2, r0, #0
 8000d58:	801a      	strh	r2, [r3, #0]
 8000d5a:	1c7b      	adds	r3, r7, #1
 8000d5c:	1c0a      	adds	r2, r1, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	1c7b      	adds	r3, r7, #1
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d68:	1cbb      	adds	r3, r7, #2
 8000d6a:	881a      	ldrh	r2, [r3, #0]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d70:	e003      	b.n	8000d7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d72:	1cbb      	adds	r3, r7, #2
 8000d74:	881a      	ldrh	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	1cbb      	adds	r3, r7, #2
 8000d8e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	041a      	lsls	r2, r3, #16
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	1cb9      	adds	r1, r7, #2
 8000da6:	8809      	ldrh	r1, [r1, #0]
 8000da8:	400b      	ands	r3, r1
 8000daa:	431a      	orrs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b004      	add	sp, #16
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f000 fb6c 	bl	80014a4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dcc:	4bc8      	ldr	r3, [pc, #800]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dd6:	4bc6      	ldr	r3, [pc, #792]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	d100      	bne.n	8000dee <HAL_RCC_OscConfig+0x36>
 8000dec:	e07d      	b.n	8000eea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	2b08      	cmp	r3, #8
 8000df2:	d007      	beq.n	8000e04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b0c      	cmp	r3, #12
 8000df8:	d112      	bne.n	8000e20 <HAL_RCC_OscConfig+0x68>
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d10d      	bne.n	8000e20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	4bba      	ldr	r3, [pc, #744]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	029b      	lsls	r3, r3, #10
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d100      	bne.n	8000e12 <HAL_RCC_OscConfig+0x5a>
 8000e10:	e06a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x130>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d166      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f000 fb42 	bl	80014a4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	025b      	lsls	r3, r3, #9
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d107      	bne.n	8000e3c <HAL_RCC_OscConfig+0x84>
 8000e2c:	4bb0      	ldr	r3, [pc, #704]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4baf      	ldr	r3, [pc, #700]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	0249      	lsls	r1, r1, #9
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e027      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	02db      	lsls	r3, r3, #11
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d10e      	bne.n	8000e66 <HAL_RCC_OscConfig+0xae>
 8000e48:	4ba9      	ldr	r3, [pc, #676]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4ba8      	ldr	r3, [pc, #672]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	02c9      	lsls	r1, r1, #11
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	4ba6      	ldr	r3, [pc, #664]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4ba5      	ldr	r3, [pc, #660]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	0249      	lsls	r1, r1, #9
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e012      	b.n	8000e8c <HAL_RCC_OscConfig+0xd4>
 8000e66:	4ba2      	ldr	r3, [pc, #648]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4ba1      	ldr	r3, [pc, #644]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e6c:	49a1      	ldr	r1, [pc, #644]	; (80010f4 <HAL_RCC_OscConfig+0x33c>)
 8000e6e:	400a      	ands	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	4b9f      	ldr	r3, [pc, #636]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	025b      	lsls	r3, r3, #9
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4b9b      	ldr	r3, [pc, #620]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b9a      	ldr	r3, [pc, #616]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000e86:	499c      	ldr	r1, [pc, #624]	; (80010f8 <HAL_RCC_OscConfig+0x340>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d014      	beq.n	8000ebe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e94:	f7ff fd08 	bl	80008a8 <HAL_GetTick>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fd03 	bl	80008a8 <HAL_GetTick>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e2f9      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eb0:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	029b      	lsls	r3, r3, #10
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0xe6>
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fcf3 	bl	80008a8 <HAL_GetTick>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ec8:	f7ff fcee 	bl	80008a8 <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e2e4      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eda:	4b85      	ldr	r3, [pc, #532]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x110>
 8000ee6:	e000      	b.n	8000eea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x13e>
 8000ef4:	e099      	b.n	800102a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	2220      	movs	r2, #32
 8000f00:	4013      	ands	r3, r2
 8000f02:	d009      	beq.n	8000f18 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000f04:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b79      	ldr	r3, [pc, #484]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	2220      	movs	r2, #32
 8000f14:	4393      	bics	r3, r2
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	d005      	beq.n	8000f2a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	d13e      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x1ea>
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d13b      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f2a:	4b71      	ldr	r3, [pc, #452]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4013      	ands	r3, r2
 8000f32:	d004      	beq.n	8000f3e <HAL_RCC_OscConfig+0x186>
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e2b2      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a6e      	ldr	r2, [pc, #440]	; (80010fc <HAL_RCC_OscConfig+0x344>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	0019      	movs	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	021a      	lsls	r2, r3, #8
 8000f4e:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f50:	430a      	orrs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f54:	4b66      	ldr	r3, [pc, #408]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2209      	movs	r2, #9
 8000f5a:	4393      	bics	r3, r2
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f66:	f000 fbeb 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 8000f6a:	0001      	movs	r1, r0
 8000f6c:	4b60      	ldr	r3, [pc, #384]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	220f      	movs	r2, #15
 8000f74:	4013      	ands	r3, r2
 8000f76:	4a62      	ldr	r2, [pc, #392]	; (8001100 <HAL_RCC_OscConfig+0x348>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	40da      	lsrs	r2, r3
 8000f7e:	4b61      	ldr	r3, [pc, #388]	; (8001104 <HAL_RCC_OscConfig+0x34c>)
 8000f80:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f82:	4b61      	ldr	r3, [pc, #388]	; (8001108 <HAL_RCC_OscConfig+0x350>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2513      	movs	r5, #19
 8000f88:	197c      	adds	r4, r7, r5
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f7ff fc46 	bl	800081c <HAL_InitTick>
 8000f90:	0003      	movs	r3, r0
 8000f92:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d046      	beq.n	800102a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000f9c:	197b      	adds	r3, r7, r5
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	e280      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d027      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fa8:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2209      	movs	r2, #9
 8000fae:	4393      	bics	r3, r2
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	4b4f      	ldr	r3, [pc, #316]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fc75 	bl	80008a8 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc70 	bl	80008a8 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e266      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd6:	4b46      	ldr	r3, [pc, #280]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d0f1      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe0:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a45      	ldr	r2, [pc, #276]	; (80010fc <HAL_RCC_OscConfig+0x344>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	0019      	movs	r1, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	021a      	lsls	r2, r3, #8
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	e018      	b.n	800102a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff8:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b3c      	ldr	r3, [pc, #240]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	438a      	bics	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fc50 	bl	80008a8 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fc4b 	bl	80008a8 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e241      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2204      	movs	r2, #4
 8001026:	4013      	ands	r3, r2
 8001028:	d1f1      	bne.n	800100e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2210      	movs	r2, #16
 8001030:	4013      	ands	r3, r2
 8001032:	d100      	bne.n	8001036 <HAL_RCC_OscConfig+0x27e>
 8001034:	e0a1      	b.n	800117a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d140      	bne.n	80010be <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d005      	beq.n	8001054 <HAL_RCC_OscConfig+0x29c>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e227      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a2c      	ldr	r2, [pc, #176]	; (800110c <HAL_RCC_OscConfig+0x354>)
 800105a:	4013      	ands	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1a      	ldr	r2, [r3, #32]
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8001064:	430a      	orrs	r2, r1
 8001066:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	0a19      	lsrs	r1, r3, #8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	061a      	lsls	r2, r3, #24
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 8001078:	430a      	orrs	r2, r1
 800107a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	0b5b      	lsrs	r3, r3, #13
 8001082:	3301      	adds	r3, #1
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0212      	lsls	r2, r2, #8
 8001088:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	210f      	movs	r1, #15
 8001092:	400b      	ands	r3, r1
 8001094:	491a      	ldr	r1, [pc, #104]	; (8001100 <HAL_RCC_OscConfig+0x348>)
 8001096:	5ccb      	ldrb	r3, [r1, r3]
 8001098:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_RCC_OscConfig+0x34c>)
 800109c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_RCC_OscConfig+0x350>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2513      	movs	r5, #19
 80010a4:	197c      	adds	r4, r7, r5
 80010a6:	0018      	movs	r0, r3
 80010a8:	f7ff fbb8 	bl	800081c <HAL_InitTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d060      	beq.n	800117a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80010b8:	197b      	adds	r3, r7, r5
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	e1f2      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d03f      	beq.n	8001146 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_RCC_OscConfig+0x338>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0049      	lsls	r1, r1, #1
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fbe8 	bl	80008a8 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010dc:	e018      	b.n	8001110 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010de:	f7ff fbe3 	bl	80008a8 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d911      	bls.n	8001110 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1d9      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
 80010f0:	40021000 	.word	0x40021000
 80010f4:	fffeffff 	.word	0xfffeffff
 80010f8:	fffbffff 	.word	0xfffbffff
 80010fc:	ffffe0ff 	.word	0xffffe0ff
 8001100:	08002550 	.word	0x08002550
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004
 800110c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001110:	4bc9      	ldr	r3, [pc, #804]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4013      	ands	r3, r2
 800111a:	d0e0      	beq.n	80010de <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111c:	4bc6      	ldr	r3, [pc, #792]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4ac6      	ldr	r2, [pc, #792]	; (800143c <HAL_RCC_OscConfig+0x684>)
 8001122:	4013      	ands	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a1a      	ldr	r2, [r3, #32]
 800112a:	4bc3      	ldr	r3, [pc, #780]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001130:	4bc1      	ldr	r3, [pc, #772]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	0a19      	lsrs	r1, r3, #8
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	061a      	lsls	r2, r3, #24
 800113e:	4bbe      	ldr	r3, [pc, #760]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	e019      	b.n	800117a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001146:	4bbc      	ldr	r3, [pc, #752]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4bbb      	ldr	r3, [pc, #748]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800114c:	49bc      	ldr	r1, [pc, #752]	; (8001440 <HAL_RCC_OscConfig+0x688>)
 800114e:	400a      	ands	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fba9 	bl	80008a8 <HAL_GetTick>
 8001156:	0003      	movs	r3, r0
 8001158:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115c:	f7ff fba4 	bl	80008a8 <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e19a      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800116e:	4bb2      	ldr	r3, [pc, #712]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4013      	ands	r3, r2
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2208      	movs	r2, #8
 8001180:	4013      	ands	r3, r2
 8001182:	d036      	beq.n	80011f2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d019      	beq.n	80011c0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118c:	4baa      	ldr	r3, [pc, #680]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800118e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001190:	4ba9      	ldr	r3, [pc, #676]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fb86 	bl	80008a8 <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff fb81 	bl	80008a8 <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e177      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011b4:	4ba0      	ldr	r3, [pc, #640]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80011b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d0f1      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3ea>
 80011be:	e018      	b.n	80011f2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c0:	4b9d      	ldr	r3, [pc, #628]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80011c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011c4:	4b9c      	ldr	r3, [pc, #624]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	438a      	bics	r2, r1
 80011ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fb6c 	bl	80008a8 <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff fb67 	bl	80008a8 <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e15d      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80011ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ec:	2202      	movs	r2, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d1f1      	bne.n	80011d6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2204      	movs	r2, #4
 80011f8:	4013      	ands	r3, r2
 80011fa:	d100      	bne.n	80011fe <HAL_RCC_OscConfig+0x446>
 80011fc:	e0ae      	b.n	800135c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2023      	movs	r0, #35	; 0x23
 8001200:	183b      	adds	r3, r7, r0
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001206:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	055b      	lsls	r3, r3, #21
 800120e:	4013      	ands	r3, r2
 8001210:	d109      	bne.n	8001226 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001216:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0549      	lsls	r1, r1, #21
 800121c:	430a      	orrs	r2, r1
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001220:	183b      	adds	r3, r7, r0
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001226:	4b87      	ldr	r3, [pc, #540]	; (8001444 <HAL_RCC_OscConfig+0x68c>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4013      	ands	r3, r2
 8001230:	d11a      	bne.n	8001268 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001232:	4b84      	ldr	r3, [pc, #528]	; (8001444 <HAL_RCC_OscConfig+0x68c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b83      	ldr	r3, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x68c>)
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	0049      	lsls	r1, r1, #1
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001240:	f7ff fb32 	bl	80008a8 <HAL_GetTick>
 8001244:	0003      	movs	r3, r0
 8001246:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff fb2d 	bl	80008a8 <HAL_GetTick>
 800124e:	0002      	movs	r2, r0
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e123      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4b79      	ldr	r3, [pc, #484]	; (8001444 <HAL_RCC_OscConfig+0x68c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4013      	ands	r3, r2
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	429a      	cmp	r2, r3
 8001272:	d107      	bne.n	8001284 <HAL_RCC_OscConfig+0x4cc>
 8001274:	4b70      	ldr	r3, [pc, #448]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	0049      	lsls	r1, r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	651a      	str	r2, [r3, #80]	; 0x50
 8001282:	e031      	b.n	80012e8 <HAL_RCC_OscConfig+0x530>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x4ee>
 800128c:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800128e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001290:	4b69      	ldr	r3, [pc, #420]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001292:	496b      	ldr	r1, [pc, #428]	; (8001440 <HAL_RCC_OscConfig+0x688>)
 8001294:	400a      	ands	r2, r1
 8001296:	651a      	str	r2, [r3, #80]	; 0x50
 8001298:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800129a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800129c:	4b66      	ldr	r3, [pc, #408]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800129e:	496a      	ldr	r1, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x690>)
 80012a0:	400a      	ands	r2, r1
 80012a2:	651a      	str	r2, [r3, #80]	; 0x50
 80012a4:	e020      	b.n	80012e8 <HAL_RCC_OscConfig+0x530>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	23a0      	movs	r3, #160	; 0xa0
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d10e      	bne.n	80012d0 <HAL_RCC_OscConfig+0x518>
 80012b2:	4b61      	ldr	r3, [pc, #388]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b6:	4b60      	ldr	r3, [pc, #384]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	430a      	orrs	r2, r1
 80012be:	651a      	str	r2, [r3, #80]	; 0x50
 80012c0:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c4:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	0049      	lsls	r1, r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	651a      	str	r2, [r3, #80]	; 0x50
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0x530>
 80012d0:	4b59      	ldr	r3, [pc, #356]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012d6:	495a      	ldr	r1, [pc, #360]	; (8001440 <HAL_RCC_OscConfig+0x688>)
 80012d8:	400a      	ands	r2, r1
 80012da:	651a      	str	r2, [r3, #80]	; 0x50
 80012dc:	4b56      	ldr	r3, [pc, #344]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e0:	4b55      	ldr	r3, [pc, #340]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80012e2:	4959      	ldr	r1, [pc, #356]	; (8001448 <HAL_RCC_OscConfig+0x690>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d015      	beq.n	800131c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fada 	bl	80008a8 <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012f8:	e009      	b.n	800130e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff fad5 	bl	80008a8 <HAL_GetTick>
 80012fe:	0002      	movs	r2, r0
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a51      	ldr	r2, [pc, #324]	; (800144c <HAL_RCC_OscConfig+0x694>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e0ca      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800130e:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4013      	ands	r3, r2
 8001318:	d0ef      	beq.n	80012fa <HAL_RCC_OscConfig+0x542>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff fac4 	bl	80008a8 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001324:	e009      	b.n	800133a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fabf 	bl	80008a8 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4a46      	ldr	r2, [pc, #280]	; (800144c <HAL_RCC_OscConfig+0x694>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e0b4      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800133a:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800133c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4013      	ands	r3, r2
 8001344:	d1ef      	bne.n	8001326 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001346:	2323      	movs	r3, #35	; 0x23
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001356:	493e      	ldr	r1, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x698>)
 8001358:	400a      	ands	r2, r1
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x5ae>
 8001364:	e09d      	b.n	80014a2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x5b6>
 800136c:	e076      	b.n	800145c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2b02      	cmp	r3, #2
 8001374:	d145      	bne.n	8001402 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b30      	ldr	r3, [pc, #192]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_RCC_OscConfig+0x69c>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fa91 	bl	80008a8 <HAL_GetTick>
 8001386:	0003      	movs	r3, r0
 8001388:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138c:	f7ff fa8c 	bl	80008a8 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e082      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	049b      	lsls	r3, r3, #18
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_RCC_OscConfig+0x6a0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	431a      	orrs	r2, r3
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	0449      	lsls	r1, r1, #17
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fa66 	bl	80008a8 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fa61 	bl	80008a8 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e057      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	049b      	lsls	r3, r3, #18
 80013fc:	4013      	ands	r3, r2
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x62a>
 8001400:	e04f      	b.n	80014a2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 8001408:	4912      	ldr	r1, [pc, #72]	; (8001454 <HAL_RCC_OscConfig+0x69c>)
 800140a:	400a      	ands	r2, r1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fa4b 	bl	80008a8 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff fa46 	bl	80008a8 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e03c      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_RCC_OscConfig+0x680>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	049b      	lsls	r3, r3, #18
 8001432:	4013      	ands	r3, r2
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x660>
 8001436:	e034      	b.n	80014a2 <HAL_RCC_OscConfig+0x6ea>
 8001438:	40021000 	.word	0x40021000
 800143c:	ffff1fff 	.word	0xffff1fff
 8001440:	fffffeff 	.word	0xfffffeff
 8001444:	40007000 	.word	0x40007000
 8001448:	fffffbff 	.word	0xfffffbff
 800144c:	00001388 	.word	0x00001388
 8001450:	efffffff 	.word	0xefffffff
 8001454:	feffffff 	.word	0xfeffffff
 8001458:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HAL_RCC_OscConfig+0x6f4>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	025b      	lsls	r3, r3, #9
 8001474:	401a      	ands	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	429a      	cmp	r2, r3
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	23f0      	movs	r3, #240	; 0xf0
 8001482:	039b      	lsls	r3, r3, #14
 8001484:	401a      	ands	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148a:	429a      	cmp	r2, r3
 800148c:	d107      	bne.n	800149e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	401a      	ands	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e000      	b.n	80014a4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b00a      	add	sp, #40	; 0x28
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e128      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c4:	4b96      	ldr	r3, [pc, #600]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	4013      	ands	r3, r2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d91e      	bls.n	8001510 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2201      	movs	r2, #1
 80014d8:	4393      	bics	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	4b90      	ldr	r3, [pc, #576]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014e4:	f7ff f9e0 	bl	80008a8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ee:	f7ff f9db 	bl	80008a8 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a8a      	ldr	r2, [pc, #552]	; (8001724 <HAL_RCC_ClockConfig+0x274>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e109      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b87      	ldr	r3, [pc, #540]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2201      	movs	r2, #1
 8001508:	4013      	ands	r3, r2
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d1ee      	bne.n	80014ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	d009      	beq.n	800152e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800151a:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	22f0      	movs	r2, #240	; 0xf0
 8001520:	4393      	bics	r3, r2
 8001522:	0019      	movs	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4b7f      	ldr	r3, [pc, #508]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 800152a:	430a      	orrs	r2, r1
 800152c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	4013      	ands	r3, r2
 8001536:	d100      	bne.n	800153a <HAL_RCC_ClockConfig+0x8a>
 8001538:	e089      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001542:	4b79      	ldr	r3, [pc, #484]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d120      	bne.n	8001590 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0e1      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b03      	cmp	r3, #3
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800155a:	4b73      	ldr	r3, [pc, #460]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	049b      	lsls	r3, r3, #18
 8001562:	4013      	ands	r3, r2
 8001564:	d114      	bne.n	8001590 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0d5      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001572:	4b6d      	ldr	r3, [pc, #436]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2204      	movs	r2, #4
 8001578:	4013      	ands	r3, r2
 800157a:	d109      	bne.n	8001590 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0ca      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4013      	ands	r3, r2
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0c2      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001590:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2203      	movs	r2, #3
 8001596:	4393      	bics	r3, r2
 8001598:	0019      	movs	r1, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a4:	f7ff f980 	bl	80008a8 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b4:	e009      	b.n	80015ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7ff f977 	bl	80008a8 <HAL_GetTick>
 80015ba:	0002      	movs	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	4a58      	ldr	r2, [pc, #352]	; (8001724 <HAL_RCC_ClockConfig+0x274>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0a5      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	220c      	movs	r2, #12
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d1ef      	bne.n	80015b6 <HAL_RCC_ClockConfig+0x106>
 80015d6:	e03a      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d111      	bne.n	8001604 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e2:	f7ff f961 	bl	80008a8 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	4a4d      	ldr	r2, [pc, #308]	; (8001724 <HAL_RCC_ClockConfig+0x274>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e08f      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	220c      	movs	r2, #12
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d1ef      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x132>
 8001602:	e024      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d11b      	bne.n	8001644 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800160c:	e009      	b.n	8001622 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160e:	f7ff f94b 	bl	80008a8 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <HAL_RCC_ClockConfig+0x274>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e079      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	220c      	movs	r2, #12
 8001628:	4013      	ands	r3, r2
 800162a:	2b04      	cmp	r3, #4
 800162c:	d1ef      	bne.n	800160e <HAL_RCC_ClockConfig+0x15e>
 800162e:	e00e      	b.n	800164e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff f93a 	bl	80008a8 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <HAL_RCC_ClockConfig+0x274>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e068      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001644:	4b38      	ldr	r3, [pc, #224]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	220c      	movs	r2, #12
 800164a:	4013      	ands	r3, r2
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2201      	movs	r2, #1
 8001654:	4013      	ands	r3, r2
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d21e      	bcs.n	800169a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4393      	bics	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800166e:	f7ff f91b 	bl	80008a8 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001676:	e009      	b.n	800168c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff f916 	bl	80008a8 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <HAL_RCC_ClockConfig+0x274>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e044      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_RCC_ClockConfig+0x270>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2204      	movs	r2, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	d009      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_RCC_ClockConfig+0x27c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80016b4:	430a      	orrs	r2, r1
 80016b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2208      	movs	r2, #8
 80016be:	4013      	ands	r3, r2
 80016c0:	d00a      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_RCC_ClockConfig+0x280>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	00da      	lsls	r2, r3, #3
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d8:	f000 f832 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016dc:	0001      	movs	r1, r0
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_RCC_ClockConfig+0x278>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	220f      	movs	r2, #15
 80016e6:	4013      	ands	r3, r2
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x284>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	000a      	movs	r2, r1
 80016ee:	40da      	lsrs	r2, r3
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_ClockConfig+0x288>)
 80016f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_RCC_ClockConfig+0x28c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	250b      	movs	r5, #11
 80016fa:	197c      	adds	r4, r7, r5
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff f88d 	bl	800081c <HAL_InitTick>
 8001702:	0003      	movs	r3, r0
 8001704:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001706:	197b      	adds	r3, r7, r5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800170e:	197b      	adds	r3, r7, r5
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	e000      	b.n	8001716 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	40022000 	.word	0x40022000
 8001724:	00001388 	.word	0x00001388
 8001728:	40021000 	.word	0x40021000
 800172c:	fffff8ff 	.word	0xfffff8ff
 8001730:	ffffc7ff 	.word	0xffffc7ff
 8001734:	08002550 	.word	0x08002550
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b08e      	sub	sp, #56	; 0x38
 8001744:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001746:	4b4c      	ldr	r3, [pc, #304]	; (8001878 <HAL_RCC_GetSysClockFreq+0x138>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800174c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174e:	230c      	movs	r3, #12
 8001750:	4013      	ands	r3, r2
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d014      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x40>
 8001756:	d900      	bls.n	800175a <HAL_RCC_GetSysClockFreq+0x1a>
 8001758:	e07b      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x112>
 800175a:	2b04      	cmp	r3, #4
 800175c:	d002      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x24>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d00b      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x3a>
 8001762:	e076      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <HAL_RCC_GetSysClockFreq+0x138>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2210      	movs	r2, #16
 800176a:	4013      	ands	r3, r2
 800176c:	d002      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001772:	e07c      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <HAL_RCC_GetSysClockFreq+0x140>)
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001778:	e079      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800177a:	4b42      	ldr	r3, [pc, #264]	; (8001884 <HAL_RCC_GetSysClockFreq+0x144>)
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800177e:	e076      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001782:	0c9a      	lsrs	r2, r3, #18
 8001784:	230f      	movs	r3, #15
 8001786:	401a      	ands	r2, r3
 8001788:	4b3f      	ldr	r3, [pc, #252]	; (8001888 <HAL_RCC_GetSysClockFreq+0x148>)
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	0d9a      	lsrs	r2, r3, #22
 8001792:	2303      	movs	r3, #3
 8001794:	4013      	ands	r3, r2
 8001796:	3301      	adds	r3, #1
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_GetSysClockFreq+0x138>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4013      	ands	r3, r2
 80017a4:	d01a      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	61bb      	str	r3, [r7, #24]
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	4a35      	ldr	r2, [pc, #212]	; (8001884 <HAL_RCC_GetSysClockFreq+0x144>)
 80017b0:	2300      	movs	r3, #0
 80017b2:	69b8      	ldr	r0, [r7, #24]
 80017b4:	69f9      	ldr	r1, [r7, #28]
 80017b6:	f7fe fd53 	bl	8000260 <__aeabi_lmul>
 80017ba:	0002      	movs	r2, r0
 80017bc:	000b      	movs	r3, r1
 80017be:	0010      	movs	r0, r2
 80017c0:	0019      	movs	r1, r3
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f7fe fd27 	bl	8000220 <__aeabi_uldivmod>
 80017d2:	0002      	movs	r2, r0
 80017d4:	000b      	movs	r3, r1
 80017d6:	0013      	movs	r3, r2
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
 80017da:	e037      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_RCC_GetSysClockFreq+0x138>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2210      	movs	r2, #16
 80017e2:	4013      	ands	r3, r2
 80017e4:	d01a      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4a23      	ldr	r2, [pc, #140]	; (800187c <HAL_RCC_GetSysClockFreq+0x13c>)
 80017f0:	2300      	movs	r3, #0
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	f7fe fd33 	bl	8000260 <__aeabi_lmul>
 80017fa:	0002      	movs	r2, r0
 80017fc:	000b      	movs	r3, r1
 80017fe:	0010      	movs	r0, r2
 8001800:	0019      	movs	r1, r3
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f7fe fd07 	bl	8000220 <__aeabi_uldivmod>
 8001812:	0002      	movs	r2, r0
 8001814:	000b      	movs	r3, r1
 8001816:	0013      	movs	r3, r2
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
 800181a:	e017      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	0018      	movs	r0, r3
 8001820:	2300      	movs	r3, #0
 8001822:	0019      	movs	r1, r3
 8001824:	4a16      	ldr	r2, [pc, #88]	; (8001880 <HAL_RCC_GetSysClockFreq+0x140>)
 8001826:	2300      	movs	r3, #0
 8001828:	f7fe fd1a 	bl	8000260 <__aeabi_lmul>
 800182c:	0002      	movs	r2, r0
 800182e:	000b      	movs	r3, r1
 8001830:	0010      	movs	r0, r2
 8001832:	0019      	movs	r1, r3
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001836:	001c      	movs	r4, r3
 8001838:	2300      	movs	r3, #0
 800183a:	001d      	movs	r5, r3
 800183c:	0022      	movs	r2, r4
 800183e:	002b      	movs	r3, r5
 8001840:	f7fe fcee 	bl	8000220 <__aeabi_uldivmod>
 8001844:	0002      	movs	r2, r0
 8001846:	000b      	movs	r3, r1
 8001848:	0013      	movs	r3, r2
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001850:	e00d      	b.n	800186e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_RCC_GetSysClockFreq+0x138>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0b5b      	lsrs	r3, r3, #13
 8001858:	2207      	movs	r2, #7
 800185a:	4013      	ands	r3, r2
 800185c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	3301      	adds	r3, #1
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	0212      	lsls	r2, r2, #8
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800186c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800186e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b00e      	add	sp, #56	; 0x38
 8001876:	bdb0      	pop	{r4, r5, r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	003d0900 	.word	0x003d0900
 8001880:	00f42400 	.word	0x00f42400
 8001884:	007a1200 	.word	0x007a1200
 8001888:	08002568 	.word	0x08002568

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <HAL_RCC_GetHCLKFreq+0x10>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	20000000 	.word	0x20000000

080018a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018a4:	f7ff fff2 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018a8:	0001      	movs	r1, r0
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	0a1b      	lsrs	r3, r3, #8
 80018b0:	2207      	movs	r2, #7
 80018b2:	4013      	ands	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	40d9      	lsrs	r1, r3
 80018ba:	000b      	movs	r3, r1
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	40021000 	.word	0x40021000
 80018c8:	08002560 	.word	0x08002560

080018cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018d0:	f7ff ffdc 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d4:	0001      	movs	r1, r0
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	0adb      	lsrs	r3, r3, #11
 80018dc:	2207      	movs	r2, #7
 80018de:	4013      	ands	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	000b      	movs	r3, r1
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08002560 	.word	0x08002560

080018f8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001900:	2017      	movs	r0, #23
 8001902:	183b      	adds	r3, r7, r0
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2220      	movs	r2, #32
 800190e:	4013      	ands	r3, r2
 8001910:	d100      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001912:	e0c7      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001914:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	055b      	lsls	r3, r3, #21
 800191c:	4013      	ands	r3, r2
 800191e:	d109      	bne.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001924:	4b80      	ldr	r3, [pc, #512]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001926:	2180      	movs	r1, #128	; 0x80
 8001928:	0549      	lsls	r1, r1, #21
 800192a:	430a      	orrs	r2, r1
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800192e:	183b      	adds	r3, r7, r0
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b7d      	ldr	r3, [pc, #500]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d11a      	bne.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001940:	4b7a      	ldr	r3, [pc, #488]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b79      	ldr	r3, [pc, #484]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0049      	lsls	r1, r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7fe ffab 	bl	80008a8 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	e008      	b.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001958:	f7fe ffa6 	bl	80008a8 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0d9      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196a:	4b70      	ldr	r3, [pc, #448]	; (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4013      	ands	r3, r2
 8001974:	d0f0      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001976:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	039b      	lsls	r3, r3, #14
 800197e:	4013      	ands	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	23c0      	movs	r3, #192	; 0xc0
 8001988:	039b      	lsls	r3, r3, #14
 800198a:	4013      	ands	r3, r2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	429a      	cmp	r2, r3
 8001990:	d013      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	23c0      	movs	r3, #192	; 0xc0
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	401a      	ands	r2, r3
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	029b      	lsls	r3, r3, #10
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d10a      	bne.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80019a4:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	401a      	ands	r2, r3
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d101      	bne.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0b1      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80019ba:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	029b      	lsls	r3, r3, #10
 80019c2:	4013      	ands	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03b      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	23c0      	movs	r3, #192	; 0xc0
 80019d2:	029b      	lsls	r3, r3, #10
 80019d4:	4013      	ands	r3, r2
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d033      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2220      	movs	r2, #32
 80019e2:	4013      	ands	r3, r2
 80019e4:	d02e      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80019e6:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ea:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f4:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0309      	lsls	r1, r1, #12
 80019fa:	430a      	orrs	r2, r1
 80019fc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019fe:	4b4a      	ldr	r3, [pc, #296]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a02:	4b49      	ldr	r3, [pc, #292]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a04:	494b      	ldr	r1, [pc, #300]	; (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001a06:	400a      	ands	r2, r1
 8001a08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	d014      	beq.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7fe ff45 	bl	80008a8 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a22:	e009      	b.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7fe ff40 	bl	80008a8 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e072      	b.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d01f      	beq.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	401a      	ands	r2, r3
 8001a58:	23c0      	movs	r3, #192	; 0xc0
 8001a5a:	029b      	lsls	r3, r3, #10
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d10c      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a35      	ldr	r2, [pc, #212]	; (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	23c0      	movs	r3, #192	; 0xc0
 8001a70:	039b      	lsls	r3, r3, #14
 8001a72:	401a      	ands	r2, r3
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	23c0      	movs	r3, #192	; 0xc0
 8001a84:	029b      	lsls	r3, r3, #10
 8001a86:	401a      	ands	r2, r3
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a8e:	2317      	movs	r3, #23
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001a9e:	4928      	ldr	r1, [pc, #160]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001adc:	430a      	orrs	r2, r1
 8001ade:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d009      	beq.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001aea:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	0019      	movs	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b006      	add	sp, #24
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40007000 	.word	0x40007000
 8001b30:	fffcffff 	.word	0xfffcffff
 8001b34:	fff7ffff 	.word	0xfff7ffff
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	ffcfffff 	.word	0xffcfffff
 8001b40:	efffffff 	.word	0xefffffff
 8001b44:	fffff3ff 	.word	0xfffff3ff
 8001b48:	ffffcfff 	.word	0xffffcfff
 8001b4c:	fff3ffff 	.word	0xfff3ffff

08001b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e044      	b.n	8001bec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d107      	bne.n	8001b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2278      	movs	r2, #120	; 0x78
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7fe fda7 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2224      	movs	r2, #36	; 0x24
 8001b7e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f830 	bl	8001bf8 <UART_SetConfig>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e024      	b.n	8001bec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fa6d 	bl	800208c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <HAL_UART_Init+0xa4>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	212a      	movs	r1, #42	; 0x2a
 8001bce:	438a      	bics	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 fb05 	bl	80021f4 <UART_CheckIdleState>
 8001bea:	0003      	movs	r3, r0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b002      	add	sp, #8
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	ffffb7ff 	.word	0xffffb7ff

08001bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c00:	231a      	movs	r3, #26
 8001c02:	2218      	movs	r2, #24
 8001c04:	189b      	adds	r3, r3, r2
 8001c06:	19db      	adds	r3, r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4ab4      	ldr	r2, [pc, #720]	; (8001efc <UART_SetConfig+0x304>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4aaf      	ldr	r2, [pc, #700]	; (8001f00 <UART_SetConfig+0x308>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4aa9      	ldr	r2, [pc, #676]	; (8001f04 <UART_SetConfig+0x30c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d004      	beq.n	8001c6c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4aa5      	ldr	r2, [pc, #660]	; (8001f08 <UART_SetConfig+0x310>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4aa1      	ldr	r2, [pc, #644]	; (8001f0c <UART_SetConfig+0x314>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d131      	bne.n	8001cf0 <UART_SetConfig+0xf8>
 8001c8c:	4ba0      	ldr	r3, [pc, #640]	; (8001f10 <UART_SetConfig+0x318>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	220c      	movs	r2, #12
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b0c      	cmp	r3, #12
 8001c96:	d01d      	beq.n	8001cd4 <UART_SetConfig+0xdc>
 8001c98:	d823      	bhi.n	8001ce2 <UART_SetConfig+0xea>
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d00c      	beq.n	8001cb8 <UART_SetConfig+0xc0>
 8001c9e:	d820      	bhi.n	8001ce2 <UART_SetConfig+0xea>
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <UART_SetConfig+0xb2>
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00e      	beq.n	8001cc6 <UART_SetConfig+0xce>
 8001ca8:	e01b      	b.n	8001ce2 <UART_SetConfig+0xea>
 8001caa:	231b      	movs	r3, #27
 8001cac:	2218      	movs	r2, #24
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	19db      	adds	r3, r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	e065      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001cb8:	231b      	movs	r3, #27
 8001cba:	2218      	movs	r2, #24
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	19db      	adds	r3, r3, r7
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e05e      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001cc6:	231b      	movs	r3, #27
 8001cc8:	2218      	movs	r2, #24
 8001cca:	189b      	adds	r3, r3, r2
 8001ccc:	19db      	adds	r3, r3, r7
 8001cce:	2204      	movs	r2, #4
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e057      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001cd4:	231b      	movs	r3, #27
 8001cd6:	2218      	movs	r2, #24
 8001cd8:	189b      	adds	r3, r3, r2
 8001cda:	19db      	adds	r3, r3, r7
 8001cdc:	2208      	movs	r2, #8
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e050      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001ce2:	231b      	movs	r3, #27
 8001ce4:	2218      	movs	r2, #24
 8001ce6:	189b      	adds	r3, r3, r2
 8001ce8:	19db      	adds	r3, r3, r7
 8001cea:	2210      	movs	r2, #16
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e049      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a83      	ldr	r2, [pc, #524]	; (8001f04 <UART_SetConfig+0x30c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d13e      	bne.n	8001d78 <UART_SetConfig+0x180>
 8001cfa:	4b85      	ldr	r3, [pc, #532]	; (8001f10 <UART_SetConfig+0x318>)
 8001cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4013      	ands	r3, r2
 8001d04:	22c0      	movs	r2, #192	; 0xc0
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d027      	beq.n	8001d5c <UART_SetConfig+0x164>
 8001d0c:	22c0      	movs	r2, #192	; 0xc0
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d82a      	bhi.n	8001d6a <UART_SetConfig+0x172>
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d011      	beq.n	8001d40 <UART_SetConfig+0x148>
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d822      	bhi.n	8001d6a <UART_SetConfig+0x172>
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d004      	beq.n	8001d32 <UART_SetConfig+0x13a>
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	00d2      	lsls	r2, r2, #3
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00e      	beq.n	8001d4e <UART_SetConfig+0x156>
 8001d30:	e01b      	b.n	8001d6a <UART_SetConfig+0x172>
 8001d32:	231b      	movs	r3, #27
 8001d34:	2218      	movs	r2, #24
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	19db      	adds	r3, r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e021      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001d40:	231b      	movs	r3, #27
 8001d42:	2218      	movs	r2, #24
 8001d44:	189b      	adds	r3, r3, r2
 8001d46:	19db      	adds	r3, r3, r7
 8001d48:	2202      	movs	r2, #2
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e01a      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001d4e:	231b      	movs	r3, #27
 8001d50:	2218      	movs	r2, #24
 8001d52:	189b      	adds	r3, r3, r2
 8001d54:	19db      	adds	r3, r3, r7
 8001d56:	2204      	movs	r2, #4
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e013      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001d5c:	231b      	movs	r3, #27
 8001d5e:	2218      	movs	r2, #24
 8001d60:	189b      	adds	r3, r3, r2
 8001d62:	19db      	adds	r3, r3, r7
 8001d64:	2208      	movs	r2, #8
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e00c      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001d6a:	231b      	movs	r3, #27
 8001d6c:	2218      	movs	r2, #24
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	19db      	adds	r3, r3, r7
 8001d72:	2210      	movs	r2, #16
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e005      	b.n	8001d84 <UART_SetConfig+0x18c>
 8001d78:	231b      	movs	r3, #27
 8001d7a:	2218      	movs	r2, #24
 8001d7c:	189b      	adds	r3, r3, r2
 8001d7e:	19db      	adds	r3, r3, r7
 8001d80:	2210      	movs	r2, #16
 8001d82:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a5e      	ldr	r2, [pc, #376]	; (8001f04 <UART_SetConfig+0x30c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d000      	beq.n	8001d90 <UART_SetConfig+0x198>
 8001d8e:	e084      	b.n	8001e9a <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001d90:	231b      	movs	r3, #27
 8001d92:	2218      	movs	r2, #24
 8001d94:	189b      	adds	r3, r3, r2
 8001d96:	19db      	adds	r3, r3, r7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d01d      	beq.n	8001dda <UART_SetConfig+0x1e2>
 8001d9e:	dc20      	bgt.n	8001de2 <UART_SetConfig+0x1ea>
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d015      	beq.n	8001dd0 <UART_SetConfig+0x1d8>
 8001da4:	dc1d      	bgt.n	8001de2 <UART_SetConfig+0x1ea>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <UART_SetConfig+0x1b8>
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d005      	beq.n	8001dba <UART_SetConfig+0x1c2>
 8001dae:	e018      	b.n	8001de2 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001db0:	f7ff fd76 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001db4:	0003      	movs	r3, r0
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001db8:	e01c      	b.n	8001df4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <UART_SetConfig+0x318>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d002      	beq.n	8001dca <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <UART_SetConfig+0x31c>)
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001dc8:	e014      	b.n	8001df4 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <UART_SetConfig+0x320>)
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001dce:	e011      	b.n	8001df4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001dd0:	f7ff fcb6 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001dd8:	e00c      	b.n	8001df4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001de0:	e008      	b.n	8001df4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001de6:	231a      	movs	r3, #26
 8001de8:	2218      	movs	r2, #24
 8001dea:	189b      	adds	r3, r3, r2
 8001dec:	19db      	adds	r3, r3, r7
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
        break;
 8001df2:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d100      	bne.n	8001dfc <UART_SetConfig+0x204>
 8001dfa:	e12f      	b.n	800205c <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	0013      	movs	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	189b      	adds	r3, r3, r2
 8001e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d305      	bcc.n	8001e18 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8001e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d906      	bls.n	8001e26 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8001e18:	231a      	movs	r3, #26
 8001e1a:	2218      	movs	r2, #24
 8001e1c:	189b      	adds	r3, r3, r2
 8001e1e:	19db      	adds	r3, r3, r7
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e11a      	b.n	800205c <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	6939      	ldr	r1, [r7, #16]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	000b      	movs	r3, r1
 8001e34:	0e1b      	lsrs	r3, r3, #24
 8001e36:	0010      	movs	r0, r2
 8001e38:	0205      	lsls	r5, r0, #8
 8001e3a:	431d      	orrs	r5, r3
 8001e3c:	000b      	movs	r3, r1
 8001e3e:	021c      	lsls	r4, r3, #8
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68b8      	ldr	r0, [r7, #8]
 8001e4e:	68f9      	ldr	r1, [r7, #12]
 8001e50:	1900      	adds	r0, r0, r4
 8001e52:	4169      	adcs	r1, r5
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f7fe f9dd 	bl	8000220 <__aeabi_uldivmod>
 8001e66:	0002      	movs	r2, r0
 8001e68:	000b      	movs	r3, r1
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e70:	23c0      	movs	r3, #192	; 0xc0
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d309      	bcc.n	8001e8c <UART_SetConfig+0x294>
 8001e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	035b      	lsls	r3, r3, #13
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d204      	bcs.n	8001e8c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	e0e7      	b.n	800205c <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8001e8c:	231a      	movs	r3, #26
 8001e8e:	2218      	movs	r2, #24
 8001e90:	189b      	adds	r3, r3, r2
 8001e92:	19db      	adds	r3, r3, r7
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e0e0      	b.n	800205c <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d000      	beq.n	8001ea8 <UART_SetConfig+0x2b0>
 8001ea6:	e082      	b.n	8001fae <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8001ea8:	231b      	movs	r3, #27
 8001eaa:	2218      	movs	r2, #24
 8001eac:	189b      	adds	r3, r3, r2
 8001eae:	19db      	adds	r3, r3, r7
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d834      	bhi.n	8001f20 <UART_SetConfig+0x328>
 8001eb6:	009a      	lsls	r2, r3, #2
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <UART_SetConfig+0x324>)
 8001eba:	18d3      	adds	r3, r2, r3
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ec0:	f7ff fcee 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ec8:	e033      	b.n	8001f32 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001eca:	f7ff fcff 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ed2:	e02e      	b.n	8001f32 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <UART_SetConfig+0x318>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	4013      	ands	r3, r2
 8001edc:	d002      	beq.n	8001ee4 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <UART_SetConfig+0x31c>)
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001ee2:	e026      	b.n	8001f32 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <UART_SetConfig+0x320>)
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ee8:	e023      	b.n	8001f32 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001eea:	f7ff fc29 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ef2:	e01e      	b.n	8001f32 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001efa:	e01a      	b.n	8001f32 <UART_SetConfig+0x33a>
 8001efc:	efff69f3 	.word	0xefff69f3
 8001f00:	ffffcfff 	.word	0xffffcfff
 8001f04:	40004800 	.word	0x40004800
 8001f08:	fffff4ff 	.word	0xfffff4ff
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	40021000 	.word	0x40021000
 8001f14:	003d0900 	.word	0x003d0900
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	08002574 	.word	0x08002574
      default:
        pclk = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8001f24:	231a      	movs	r3, #26
 8001f26:	2218      	movs	r2, #24
 8001f28:	189b      	adds	r3, r3, r2
 8001f2a:	19db      	adds	r3, r3, r7
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
        break;
 8001f30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d100      	bne.n	8001f3a <UART_SetConfig+0x342>
 8001f38:	e090      	b.n	800205c <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	005a      	lsls	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	18d2      	adds	r2, r2, r3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	f7fe f8db 	bl	8000108 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d921      	bls.n	8001fa0 <UART_SetConfig+0x3a8>
 8001f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	025b      	lsls	r3, r3, #9
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d21c      	bcs.n	8001fa0 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	200e      	movs	r0, #14
 8001f6c:	2418      	movs	r4, #24
 8001f6e:	1903      	adds	r3, r0, r4
 8001f70:	19db      	adds	r3, r3, r7
 8001f72:	210f      	movs	r1, #15
 8001f74:	438a      	bics	r2, r1
 8001f76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	b299      	uxth	r1, r3
 8001f84:	1903      	adds	r3, r0, r4
 8001f86:	19db      	adds	r3, r3, r7
 8001f88:	1902      	adds	r2, r0, r4
 8001f8a:	19d2      	adds	r2, r2, r7
 8001f8c:	8812      	ldrh	r2, [r2, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1902      	adds	r2, r0, r4
 8001f98:	19d2      	adds	r2, r2, r7
 8001f9a:	8812      	ldrh	r2, [r2, #0]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	e05d      	b.n	800205c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8001fa0:	231a      	movs	r3, #26
 8001fa2:	2218      	movs	r2, #24
 8001fa4:	189b      	adds	r3, r3, r2
 8001fa6:	19db      	adds	r3, r3, r7
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e056      	b.n	800205c <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001fae:	231b      	movs	r3, #27
 8001fb0:	2218      	movs	r2, #24
 8001fb2:	189b      	adds	r3, r3, r2
 8001fb4:	19db      	adds	r3, r3, r7
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d822      	bhi.n	8002002 <UART_SetConfig+0x40a>
 8001fbc:	009a      	lsls	r2, r3, #2
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <UART_SetConfig+0x484>)
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fc6:	f7ff fc6b 	bl	80018a0 <HAL_RCC_GetPCLK1Freq>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fce:	e021      	b.n	8002014 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fd0:	f7ff fc7c 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fd8:	e01c      	b.n	8002014 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <UART_SetConfig+0x488>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2210      	movs	r2, #16
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d002      	beq.n	8001fea <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <UART_SetConfig+0x48c>)
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8001fe8:	e014      	b.n	8002014 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8001fea:	4b27      	ldr	r3, [pc, #156]	; (8002088 <UART_SetConfig+0x490>)
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001fee:	e011      	b.n	8002014 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ff0:	f7ff fba6 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001ff8:	e00c      	b.n	8002014 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002000:	e008      	b.n	8002014 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002006:	231a      	movs	r3, #26
 8002008:	2218      	movs	r2, #24
 800200a:	189b      	adds	r3, r3, r2
 800200c:	19db      	adds	r3, r3, r7
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
        break;
 8002012:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d020      	beq.n	800205c <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	085a      	lsrs	r2, r3, #1
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002022:	18d2      	adds	r2, r2, r3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0019      	movs	r1, r3
 800202a:	0010      	movs	r0, r2
 800202c:	f7fe f86c 	bl	8000108 <__udivsi3>
 8002030:	0003      	movs	r3, r0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d90a      	bls.n	8002050 <UART_SetConfig+0x458>
 800203a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	429a      	cmp	r2, r3
 8002042:	d205      	bcs.n	8002050 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	b29a      	uxth	r2, r3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	e005      	b.n	800205c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002050:	231a      	movs	r3, #26
 8002052:	2218      	movs	r2, #24
 8002054:	189b      	adds	r3, r3, r2
 8002056:	19db      	adds	r3, r3, r7
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2200      	movs	r2, #0
 8002060:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	2200      	movs	r2, #0
 8002066:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002068:	231a      	movs	r3, #26
 800206a:	2218      	movs	r2, #24
 800206c:	189b      	adds	r3, r3, r2
 800206e:	19db      	adds	r3, r3, r7
 8002070:	781b      	ldrb	r3, [r3, #0]
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b00e      	add	sp, #56	; 0x38
 8002078:	bdb0      	pop	{r4, r5, r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	08002598 	.word	0x08002598
 8002080:	40021000 	.word	0x40021000
 8002084:	003d0900 	.word	0x003d0900
 8002088:	00f42400 	.word	0x00f42400

0800208c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2201      	movs	r2, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d00b      	beq.n	80020b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <UART_AdvFeatureConfig+0x144>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	0019      	movs	r1, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	d00b      	beq.n	80020d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4a43      	ldr	r2, [pc, #268]	; (80021d4 <UART_AdvFeatureConfig+0x148>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	d00b      	beq.n	80020fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <UART_AdvFeatureConfig+0x14c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2208      	movs	r2, #8
 8002100:	4013      	ands	r3, r2
 8002102:	d00b      	beq.n	800211c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a34      	ldr	r2, [pc, #208]	; (80021dc <UART_AdvFeatureConfig+0x150>)
 800210c:	4013      	ands	r3, r2
 800210e:	0019      	movs	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	2210      	movs	r2, #16
 8002122:	4013      	ands	r3, r2
 8002124:	d00b      	beq.n	800213e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <UART_AdvFeatureConfig+0x154>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2220      	movs	r2, #32
 8002144:	4013      	ands	r3, r2
 8002146:	d00b      	beq.n	8002160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4a25      	ldr	r2, [pc, #148]	; (80021e4 <UART_AdvFeatureConfig+0x158>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2240      	movs	r2, #64	; 0x40
 8002166:	4013      	ands	r3, r2
 8002168:	d01d      	beq.n	80021a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <UART_AdvFeatureConfig+0x15c>)
 8002172:	4013      	ands	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	035b      	lsls	r3, r3, #13
 800218a:	429a      	cmp	r2, r3
 800218c:	d10b      	bne.n	80021a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a15      	ldr	r2, [pc, #84]	; (80021ec <UART_AdvFeatureConfig+0x160>)
 8002196:	4013      	ands	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <UART_AdvFeatureConfig+0x164>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	605a      	str	r2, [r3, #4]
  }
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	fffdffff 	.word	0xfffdffff
 80021d4:	fffeffff 	.word	0xfffeffff
 80021d8:	fffbffff 	.word	0xfffbffff
 80021dc:	ffff7fff 	.word	0xffff7fff
 80021e0:	ffffefff 	.word	0xffffefff
 80021e4:	ffffdfff 	.word	0xffffdfff
 80021e8:	ffefffff 	.word	0xffefffff
 80021ec:	ff9fffff 	.word	0xff9fffff
 80021f0:	fff7ffff 	.word	0xfff7ffff

080021f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b092      	sub	sp, #72	; 0x48
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2284      	movs	r2, #132	; 0x84
 8002200:	2100      	movs	r1, #0
 8002202:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002204:	f7fe fb50 	bl	80008a8 <HAL_GetTick>
 8002208:	0003      	movs	r3, r0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2208      	movs	r2, #8
 8002214:	4013      	ands	r3, r2
 8002216:	2b08      	cmp	r3, #8
 8002218:	d12c      	bne.n	8002274 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221c:	2280      	movs	r2, #128	; 0x80
 800221e:	0391      	lsls	r1, r2, #14
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4a46      	ldr	r2, [pc, #280]	; (800233c <UART_CheckIdleState+0x148>)
 8002224:	9200      	str	r2, [sp, #0]
 8002226:	2200      	movs	r2, #0
 8002228:	f000 f88c 	bl	8002344 <UART_WaitOnFlagUntilTimeout>
 800222c:	1e03      	subs	r3, r0, #0
 800222e:	d021      	beq.n	8002274 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002230:	f3ef 8310 	mrs	r3, PRIMASK
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
 800223a:	2301      	movs	r3, #1
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	f383 8810 	msr	PRIMASK, r3
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	438a      	bics	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	f383 8810 	msr	PRIMASK, r3
}
 8002260:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2278      	movs	r2, #120	; 0x78
 800226c:	2100      	movs	r1, #0
 800226e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e05f      	b.n	8002334 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2204      	movs	r2, #4
 800227c:	4013      	ands	r3, r2
 800227e:	2b04      	cmp	r3, #4
 8002280:	d146      	bne.n	8002310 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	03d1      	lsls	r1, r2, #15
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4a2c      	ldr	r2, [pc, #176]	; (800233c <UART_CheckIdleState+0x148>)
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	f000 f858 	bl	8002344 <UART_WaitOnFlagUntilTimeout>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d03b      	beq.n	8002310 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002298:	f3ef 8310 	mrs	r3, PRIMASK
 800229c:	60fb      	str	r3, [r7, #12]
  return(result);
 800229e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
 80022a2:	2301      	movs	r3, #1
 80022a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f383 8810 	msr	PRIMASK, r3
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4921      	ldr	r1, [pc, #132]	; (8002340 <UART_CheckIdleState+0x14c>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f383 8810 	msr	PRIMASK, r3
}
 80022c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022ca:	f3ef 8310 	mrs	r3, PRIMASK
 80022ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80022d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
 80022d4:	2301      	movs	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f383 8810 	msr	PRIMASK, r3
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2101      	movs	r1, #1
 80022ec:	438a      	bics	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	f383 8810 	msr	PRIMASK, r3
}
 80022fa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	2120      	movs	r1, #32
 8002302:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2278      	movs	r2, #120	; 0x78
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e011      	b.n	8002334 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	2120      	movs	r1, #32
 800231c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2278      	movs	r2, #120	; 0x78
 800232e:	2100      	movs	r1, #0
 8002330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b010      	add	sp, #64	; 0x40
 800233a:	bd80      	pop	{r7, pc}
 800233c:	01ffffff 	.word	0x01ffffff
 8002340:	fffffedf 	.word	0xfffffedf

08002344 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	1dfb      	adds	r3, r7, #7
 8002352:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002354:	e04b      	b.n	80023ee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	3301      	adds	r3, #1
 800235a:	d048      	beq.n	80023ee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235c:	f7fe faa4 	bl	80008a8 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	429a      	cmp	r2, r3
 800236a:	d302      	bcc.n	8002372 <UART_WaitOnFlagUntilTimeout+0x2e>
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e04b      	b.n	800240e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d035      	beq.n	80023ee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	2208      	movs	r2, #8
 800238a:	4013      	ands	r3, r2
 800238c:	2b08      	cmp	r3, #8
 800238e:	d111      	bne.n	80023b4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2208      	movs	r2, #8
 8002396:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f83c 	bl	8002418 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2284      	movs	r2, #132	; 0x84
 80023a4:	2108      	movs	r1, #8
 80023a6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2278      	movs	r2, #120	; 0x78
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e02c      	b.n	800240e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69da      	ldr	r2, [r3, #28]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	401a      	ands	r2, r3
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d112      	bne.n	80023ee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	0018      	movs	r0, r3
 80023d6:	f000 f81f 	bl	8002418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2284      	movs	r2, #132	; 0x84
 80023de:	2120      	movs	r1, #32
 80023e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2278      	movs	r2, #120	; 0x78
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e00f      	b.n	800240e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4013      	ands	r3, r2
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	425a      	negs	r2, r3
 80023fe:	4153      	adcs	r3, r2
 8002400:	b2db      	uxtb	r3, r3
 8002402:	001a      	movs	r2, r3
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d0a4      	beq.n	8002356 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08e      	sub	sp, #56	; 0x38
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002420:	f3ef 8310 	mrs	r3, PRIMASK
 8002424:	617b      	str	r3, [r7, #20]
  return(result);
 8002426:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002428:	637b      	str	r3, [r7, #52]	; 0x34
 800242a:	2301      	movs	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f383 8810 	msr	PRIMASK, r3
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4926      	ldr	r1, [pc, #152]	; (80024dc <UART_EndRxTransfer+0xc4>)
 8002442:	400a      	ands	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f383 8810 	msr	PRIMASK, r3
}
 8002450:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002452:	f3ef 8310 	mrs	r3, PRIMASK
 8002456:	623b      	str	r3, [r7, #32]
  return(result);
 8002458:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
 800245c:	2301      	movs	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	f383 8810 	msr	PRIMASK, r3
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247e:	f383 8810 	msr	PRIMASK, r3
}
 8002482:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	2b01      	cmp	r3, #1
 800248a:	d118      	bne.n	80024be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248c:	f3ef 8310 	mrs	r3, PRIMASK
 8002490:	60bb      	str	r3, [r7, #8]
  return(result);
 8002492:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002496:	2301      	movs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f383 8810 	msr	PRIMASK, r3
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2110      	movs	r1, #16
 80024ae:	438a      	bics	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f383 8810 	msr	PRIMASK, r3
}
 80024bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2280      	movs	r2, #128	; 0x80
 80024c2:	2120      	movs	r1, #32
 80024c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b00e      	add	sp, #56	; 0x38
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	fffffedf 	.word	0xfffffedf

080024e0 <memset>:
 80024e0:	0003      	movs	r3, r0
 80024e2:	1882      	adds	r2, r0, r2
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d100      	bne.n	80024ea <memset+0xa>
 80024e8:	4770      	bx	lr
 80024ea:	7019      	strb	r1, [r3, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	e7f9      	b.n	80024e4 <memset+0x4>

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	2600      	movs	r6, #0
 80024f4:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x38>)
 80024f6:	4d0d      	ldr	r5, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f8:	1b64      	subs	r4, r4, r5
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	2600      	movs	r6, #0
 8002502:	f000 f819 	bl	8002538 <_init>
 8002506:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <__libc_init_array+0x40>)
 8002508:	4d0a      	ldr	r5, [pc, #40]	; (8002534 <__libc_init_array+0x44>)
 800250a:	1b64      	subs	r4, r4, r5
 800250c:	10a4      	asrs	r4, r4, #2
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	00b3      	lsls	r3, r6, #2
 8002516:	58eb      	ldr	r3, [r5, r3]
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	00b3      	lsls	r3, r6, #2
 8002520:	58eb      	ldr	r3, [r5, r3]
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	080025c4 	.word	0x080025c4
 800252c:	080025c4 	.word	0x080025c4
 8002530:	080025c8 	.word	0x080025c8
 8002534:	080025c4 	.word	0x080025c4

08002538 <_init>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr

08002544 <_fini>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr
